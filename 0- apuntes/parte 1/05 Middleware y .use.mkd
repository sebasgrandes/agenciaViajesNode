# ¿que es el middleware en express? ¿esta activado por defecto?

El término "middleware" en el contexto de Express.js se refiere a funciones que tienen acceso al objeto de solicitud (`req`), al objeto de respuesta (`res`), y al siguiente middleware en el ciclo de solicitud/respuesta de la aplicación. Los middleware básicamente actúan como una serie de "capas" por las que pasan las solicitudes HTTP en una aplicación Express, permitiendo la ejecución de cualquier código, realizando cambios en los objetos de solicitud y respuesta, terminando el ciclo de solicitud/respuesta, o invocando el siguiente middleware en la pila.

Un ejemplo simple de middleware en Express podría ser:

```javascript
const express = require("express");
const app = express();

// Middleware que registra la hora de cada solicitud
app.use((req, res, next) => {
    console.log(`Hora: ${Date.now()}`);
    next();
});

app.get("/", (req, res) => {
    res.send("Hola Mundo");
});

app.listen(3000);
```

En este ejemplo, `app.use()` es utilizado para aplicar un middleware que registra la hora de cada solicitud. Cuando una solicitud llega al servidor, primero pasa por este middleware antes de llegar a la ruta que maneja `'/'`.

Express no tiene middleware "activado por defecto" en el sentido de que viene con una serie de middleware preinstalados que se aplican automáticamente. Sin embargo, algunas funcionalidades que podrían considerarse "middleware", como el manejo de rutas (`app.get()`, `app.post()`, etc.) están incorporadas en el propio framework.

Para usar funcionalidades adicionales como el manejo de archivos JSON, manejo de formularios, sesiones, etc., hay que instalar y/o aplicar middleware específico. Por ejemplo, para manejar cuerpos de solicitud JSON, tendrías que utilizar `express.json()` como un middleware:

```javascript
app.use(express.json());
```

Este middleware no está "activado por defecto"; tienes que añadirlo explícitamente en tu código.

# .get es un middleware? ¿todos los middlewares deben tener un "next"?

La función `.get()` en Express es un método de manejo de rutas que especifica qué hacer cuando se recibe una solicitud HTTP GET para una ruta específica. Aunque no se le denomina "middleware" en el sentido estricto, la función que pasa como argumento a `.get()` tiene una estructura similar a un middleware: tiene acceso a los objetos `req` (solicitud) y `res` (respuesta), y potencialmente también al argumento `next`.

Por ejemplo:

```javascript
app.get("/", (req, res) => {
    res.send("Página principal");
});
```

En este caso, la función `(req, res) => { res.send('Página principal'); }` actúa de manera similar a un middleware pero está vinculada específicamente a la ruta `'/'` y al método GET.

Respecto a tu segunda pregunta, no, no todos los middlewares necesariamente tienen que tener un `next`. Si un middleware puede manejar completamente una solicitud (por ejemplo, enviar una respuesta al cliente), entonces no necesita llamar a `next()` para pasar el control al siguiente middleware en la pila. Sin embargo, si deseas que la solicitud continúe a través de la cadena de middleware después de que tu función haya hecho su trabajo, entonces debes llamar a `next()`.

Por ejemplo, el siguiente middleware termina el ciclo de solicitud/respuesta y no necesita llamar a `next()`:

```javascript
app.use((req, res) => {
    res.send(
        "Este middleware maneja todas las solicitudes y envía una respuesta, no se necesita next()"
    );
});
```

Mientras que el siguiente middleware modifica el objeto `req` y luego pasa el control al siguiente middleware en la cadena:

```javascript
app.use((req, res, next) => {
    req.myCustomProperty = "Algo útil";
    next();
});
```

En este último caso, `next()` se utiliza para invocar el siguiente middleware en la pila.

# me mostraste este ejemplo del .use: app.use((req, res, next) => {. pero tengo otro que es asi: app.use("/", router);

Ambos ejemplos de `app.use()` son válidos, pero sirven para diferentes propósitos en una aplicación Express.

1. `app.use((req, res, next) => { ... })`: En este caso, se está utilizando un middleware genérico que tiene acceso a los objetos de solicitud (`req`), respuesta (`res`), y el siguiente middleware en la pila (`next`). Este middleware se ejecutará para todas las rutas y métodos HTTP (GET, POST, etc.) a menos que se detenga el flujo en algún middleware anterior.

2. `app.use("/", router)`: En este caso, se está montando un enrutador en una ruta específica (en este ejemplo, la ruta raíz `/`). Un enrutador es básicamente un conjunto de middlewares y rutas agrupados en un objeto separado. Esto es útil para modularizar tu aplicación y mantenerla organizada.

Por ejemplo, podrías tener un archivo `userRoutes.js` que maneje todas las rutas relacionadas con los usuarios:

```javascript
const express = require("express");
const router = express.Router();

router.get("/", (req, res) => {
    res.send("Lista de usuarios");
});

router.get("/:id", (req, res) => {
    res.send(`Usuario con ID: ${req.params.id}`);
});

module.exports = router;
```

Y luego en tu archivo principal de aplicación, podrías montar este enrutador en una ruta específica:

```javascript
const express = require("express");
const userRoutes = require("./userRoutes");

const app = express();

app.use("/users", userRoutes);

app.listen(3000);
```

En este ejemplo, una solicitud GET a `/users` devolvería "Lista de usuarios", y una solicitud GET a `/users/123` devolvería "Usuario con ID: 123".

En resumen, `app.use()` es una función muy flexible en Express que puedes utilizar para diferentes fines, ya sea para aplicar un middleware a todas las rutas o para montar un enrutador en una ruta específica.

# los middleware siempre se ejecutan para todas las rutas y métodos HTTP (GET, POST, PUT, PATCH y DELETE...) ?

No, los middleware no tienen que ejecutarse necesariamente para todas las rutas y métodos HTTP. Tienes varias formas de controlar este comportamiento:

1. **Rutas específicas**: Puedes aplicar middleware solo a rutas específicas al incluirlas como argumentos en métodos como `.get()`, `.post()`, etc.

    ```javascript
    app.get("/mi-ruta", miMiddleware, (req, res) => {
        // Código de manejo para GET en '/mi-ruta'
    });
    ```

    En este caso, `miMiddleware` se ejecutará solo para las solicitudes GET a `/mi-ruta`.

2. **Prefijos de ruta**: Puedes aplicar middleware a un prefijo de ruta utilizando `app.use()`.

    ```javascript
    app.use("/mi-ruta", miMiddleware);
    ```

    Ahora, `miMiddleware` se ejecutará para todas las solicitudes que comiencen con `/mi-ruta`, independientemente del método HTTP.

3. **Enrutadores**: Puedes aplicar middleware a un enrutador de Express, que luego puedes montar en una ruta específica o en varias rutas.

    ```javascript
    const router = express.Router();
    router.use(miMiddleware);
    // Definir rutas para el enrutador
    app.use("/mi-ruta", router);
    ```

    En este caso, `miMiddleware` se aplicará a todas las rutas que sean manejadas por `router` y que se monten bajo `/mi-ruta`.

4. **Métodos HTTP específicos**: Al definir middleware dentro de métodos como `app.get()`, `app.post()`, etc., puedes asegurarte de que se apliquen solo a esos métodos específicos.

5. **Orden de definición**: El orden en que defines tus middleware y rutas en el código importa. Un middleware se aplica a todas las rutas definidas después de dicho middleware. Si defines un middleware después de una ruta, no se aplicará a esa ruta.

6. **Condiciones personalizadas**: Dentro de un middleware, también puedes aplicar lógica condicional para decidir si quieres que se ejecute o no, por ejemplo, en función de algún atributo de `req`.

Por lo tanto, tienes un control bastante granular sobre cuándo y cómo se ejecutan tus middleware.

# muestrame un ejemplo del 1er caso que mencionaste

Claro, aquí tienes un ejemplo simple que ilustra cómo aplicar un middleware solo a una ruta específica utilizando el método `.get()`.

```javascript
const express = require("express");
const app = express();

// Define un middleware simple
const miMiddleware = (req, res, next) => {
    console.log("Mi middleware se ha ejecutado");
    next(); // Pasar al siguiente middleware o al manejador de la ruta
};

// Aplica el middleware solo a la ruta GET '/especifica'
app.get("/especifica", miMiddleware, (req, res) => {
    res.send("Has accedido a una ruta con middleware específico.");
});

// Otra ruta GET sin el middleware
app.get("/general", (req, res) => {
    res.send("Has accedido a una ruta sin middleware específico.");
});

// Escuchar en el puerto 3000
app.listen(3000, () => {
    console.log("Servidor escuchando en el puerto 3000");
});
```

En este ejemplo, el middleware `miMiddleware` solo se ejecuta cuando se realiza una solicitud GET a la ruta `/especifica`. Si accedes a `/general`, verás que el middleware no se ejecuta (es decir, no verás el mensaje "Mi middleware se ha ejecutado" en la consola).

Para probarlo, puedes ejecutar este código en tu servidor y luego acceder a `http://localhost:3000/especifica` y `http://localhost:3000/general` desde tu navegador o utilizando alguna herramienta como Postman. Observarás que el middleware se activa solo para la primera ruta.

# .use -> definitivo

El método `.use()` en Express se utiliza para montar funciones middleware en una ruta específica (o en todas las rutas). Las funciones middleware son funciones que tienen acceso a los objetos de **solicitud (request)**, respuesta (response) y al siguiente middleware en el ciclo de solicitud/respuesta de la aplicación.

Con objetos de solicitud nos referimos a los objetos que representan la solicitud HTTP entrante (es decir, puede ser post, get, put, patch o delete)

### Para qué sirve

1. **Preprocesamiento**: Puedes usar middleware para modificar la solicitud o la respuesta, o para hacer cosas como parsear datos en la solicitud.

2. **Ruteo**: Puedes montar un enrutador completo como un middleware.

3. **Autenticación y Autorización**: Puedes usar middleware para implementar lógica de autenticación y autorización.

4. **Logging y Monitoreo**: Puedes usar middleware para registrar detalles sobre la solicitud y la respuesta.

5. **Manejo de Errores**: Express permite el uso de middleware específico para manejar errores.

### Cuándo se usa

1. **Para aplicar a todas las rutas y métodos**:
    ```javascript
    app.use((req, res, next) => {
      console.log('Este middleware se ejecuta para todas las rutas y métodos.');
      next();
    });
    ```

2. **Para aplicar a un prefijo de ruta específico**:
    ```javascript
    app.use('/api', miApiMiddleware);
    ```

3. **Para montar un enrutador**:
    ```javascript
    app.use('/usuarios', usuariosRouter);
    ```

4. **Para manejar errores (middleware de manejo de errores siempre va al final)**:
    ```javascript
    app.use((err, req, res, next) => {
      console.error(err.stack);
      res.status(500).send('Algo salió mal.');
    });
    ```

5. **Para servir archivos estáticos**:
    ```javascript
    app.use(express.static('public'));
    ```

6. **Para usar middlewares de terceros**:
    ```javascript
    const bodyParser = require('body-parser');
    app.use(bodyParser.json());
    ```

El método `.use()` es extremadamente flexible y se usa en una variedad de situaciones cuando se trabaja con Express.